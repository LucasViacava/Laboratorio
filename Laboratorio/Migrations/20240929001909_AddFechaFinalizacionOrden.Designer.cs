// <auto-generated />
using System;
using Laboratorio.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Laboratorio.Migrations
{
    [DbContext(typeof(RestauranteContext))]
    [Migration("20240929001909_AddFechaFinalizacionOrden")]
    partial class AddFechaFinalizacionOrden
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Laboratorio.Entities.Comanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrdenId");

                    b.ToTable("Comandas");
                });

            modelBuilder.Entity("Laboratorio.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RolId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Salario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaContratacion = new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Local).AddTicks(8232),
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8209), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Juan Perez",
                            Password = "1234",
                            RolId = 1,
                            Salario = 2000m,
                            Ubicacion = "Interior",
                            UserName = "jperez"
                        },
                        new
                        {
                            Id = 2,
                            FechaContratacion = new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Local).AddTicks(8239),
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8238), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Maria Garcia",
                            Password = "1234",
                            RolId = 2,
                            Salario = 2500m,
                            Ubicacion = "Cocina",
                            UserName = "mgarcia"
                        },
                        new
                        {
                            Id = 3,
                            FechaContratacion = new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Local).AddTicks(8240),
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8240), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Carlos Sanchez",
                            Password = "1234",
                            RolId = 3,
                            Salario = 2200m,
                            Ubicacion = "Bar",
                            UserName = "csanchez"
                        },
                        new
                        {
                            Id = 4,
                            FechaContratacion = new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Local).AddTicks(8242),
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8241), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Ana Lopez",
                            Password = "1234",
                            RolId = 4,
                            Salario = 2300m,
                            Ubicacion = "Caja",
                            UserName = "alopez"
                        },
                        new
                        {
                            Id = 5,
                            FechaContratacion = new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Local).AddTicks(8243),
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8242), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Roberto Diaz",
                            Password = "1234",
                            RolId = 5,
                            Salario = 3000m,
                            Ubicacion = "Oficina",
                            UserName = "rdiaz"
                        });
                });

            modelBuilder.Entity("Laboratorio.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TiempoPreparacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "Principal",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8270), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Milanesa a Caballo",
                            Precio = 800m,
                            TiempoPreparacion = 15
                        },
                        new
                        {
                            Id = 2,
                            Categoria = "Vegetariano",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8273), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Hamburguesa de Garbanzo",
                            Precio = 500m,
                            TiempoPreparacion = 10
                        },
                        new
                        {
                            Id = 3,
                            Categoria = "Entrada",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8274), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Ensalada Caesar",
                            Precio = 700m,
                            TiempoPreparacion = 5
                        },
                        new
                        {
                            Id = 4,
                            Categoria = "Principal",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8275), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Pizza Margherita",
                            Precio = 900m,
                            TiempoPreparacion = 20
                        },
                        new
                        {
                            Id = 5,
                            Categoria = "Principal",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8276), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Spaghetti a la Bolognesa",
                            Precio = 850m,
                            TiempoPreparacion = 18
                        },
                        new
                        {
                            Id = 6,
                            Categoria = "Principal",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8277), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Tacos al Pastor",
                            Precio = 600m,
                            TiempoPreparacion = 12
                        },
                        new
                        {
                            Id = 7,
                            Categoria = "Bebida",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8278), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Corona",
                            Precio = 200m,
                            TiempoPreparacion = 1
                        },
                        new
                        {
                            Id = 8,
                            Categoria = "Bebida",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8279), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Daikiri",
                            Precio = 300m,
                            TiempoPreparacion = 7
                        },
                        new
                        {
                            Id = 9,
                            Categoria = "Bebida",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8280), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Limonada",
                            Precio = 150m,
                            TiempoPreparacion = 2
                        },
                        new
                        {
                            Id = 10,
                            Categoria = "Postre",
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8280), new TimeSpan(0, -3, 0, 0, 0)),
                            Nombre = "Brownie con Helado",
                            Precio = 400m,
                            TiempoPreparacion = 9
                        });
                });

            modelBuilder.Entity("Laboratorio.Entities.Mesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mesas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacidad = 4,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8252), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 101,
                            Ubicacion = "Interior"
                        },
                        new
                        {
                            Id = 2,
                            Capacidad = 2,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8254), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 102,
                            Ubicacion = "Terraza"
                        },
                        new
                        {
                            Id = 3,
                            Capacidad = 6,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8255), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 103,
                            Ubicacion = "Interior"
                        },
                        new
                        {
                            Id = 4,
                            Capacidad = 4,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8256), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 104,
                            Ubicacion = "Patio"
                        },
                        new
                        {
                            Id = 5,
                            Capacidad = 8,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8257), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 105,
                            Ubicacion = "Terraza"
                        },
                        new
                        {
                            Id = 6,
                            Capacidad = 2,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8258), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 106,
                            Ubicacion = "Interior"
                        },
                        new
                        {
                            Id = 7,
                            Capacidad = 6,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8258), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 107,
                            Ubicacion = "Terraza"
                        },
                        new
                        {
                            Id = 8,
                            Capacidad = 4,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8259), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 108,
                            Ubicacion = "Interior"
                        },
                        new
                        {
                            Id = 9,
                            Capacidad = 2,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8260), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 109,
                            Ubicacion = "Interior"
                        },
                        new
                        {
                            Id = 10,
                            Capacidad = 6,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 9, 28, 21, 19, 9, 298, DateTimeKind.Unspecified).AddTicks(8261), new TimeSpan(0, -3, 0, 0, 0)),
                            Numero = 110,
                            Ubicacion = "Terraza"
                        });
                });

            modelBuilder.Entity("Laboratorio.Entities.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FechaFinalizacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MesaId")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("MesaId");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("Laboratorio.Entities.OrdenItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrdenId");

                    b.ToTable("OrdenItems");
                });

            modelBuilder.Entity("Laboratorio.Entities.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FechaPago")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdenId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Laboratorio.Entities.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FechaReserva")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MesaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MesaId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Laboratorio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Mozo"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Chef"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Bartender"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Cajero"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Gerente"
                        });
                });

            modelBuilder.Entity("Laboratorio.Entities.Comanda", b =>
                {
                    b.HasOne("Laboratorio.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Laboratorio.Entities.Orden", "Orden")
                        .WithMany("Comandas")
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("Laboratorio.Entities.Empleado", b =>
                {
                    b.HasOne("Laboratorio.Entities.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Laboratorio.Entities.Orden", b =>
                {
                    b.HasOne("Laboratorio.Entities.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Laboratorio.Entities.Mesa", "Mesa")
                        .WithMany()
                        .HasForeignKey("MesaId");

                    b.Navigation("Empleado");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("Laboratorio.Entities.OrdenItem", b =>
                {
                    b.HasOne("Laboratorio.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Laboratorio.Entities.Orden", "Orden")
                        .WithMany("OrdenItems")
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("Laboratorio.Entities.Pago", b =>
                {
                    b.HasOne("Laboratorio.Entities.Orden", "Orden")
                        .WithMany()
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("Laboratorio.Entities.Reserva", b =>
                {
                    b.HasOne("Laboratorio.Entities.Mesa", "Mesa")
                        .WithMany()
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("Laboratorio.Entities.Orden", b =>
                {
                    b.Navigation("Comandas");

                    b.Navigation("OrdenItems");
                });
#pragma warning restore 612, 618
        }
    }
}
